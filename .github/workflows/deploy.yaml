name: Reusable Build, Push and Deploy Workflow

on:
  workflow_call:
    inputs:
      ENVIRONMENT_ID:
        required: true
        type: string
      SERVICE_ID:
        required: true
        type: string
    secrets:
      RAILWAY_API_TOKEN:
        required: true

permissions:
  contents: read
  packages: write

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log into the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Encore CLI
        uses: sozo-design/curl@v1.0.2
        with:
          args: --output install.sh -L https://encore.dev/install.sh

      - name: Install Encore CLI
        run: bash install.sh

      - name: Build Docker image
        run: /home/runner/.encore/bin/encore build --config infra.config.json docker audionaut

      - name: Tag Docker image
        run: docker tag audionaut ghcr.io/${{ github.repository }}:${{ github.head_ref || github.ref_name }}

      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository }}:${{ github.head_ref || github.ref_name }}

      - name: Trigger Railway deployment
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          ENVIRONMENT_ID: ${{ inputs.ENVIRONMENT_ID }}
          SERVICE_ID: ${{ inputs.SERVICE_ID }}
        run: |
          set -eou pipefail

          data="{
            \"query\":\"mutation ServiceInstanceRedeploy { serviceInstanceRedeploy(environmentId: \\\"${ENVIRONMENT_ID}\\\", serviceId: \\\"${SERVICE_ID}\\\") }\"
          }"

          response=$(
            curl --request 'POST' \
              --header "Content-Type: application/json" \
              --header "authorization: Bearer ${RAILWAY_API_TOKEN}" \
              --data "${data}" \
              --silent \
              'https://backboard.railway.com/graphql/v2'
          )

          if echo "${response}" | jq -e '.errors' > /dev/null; then
            >&2 echo 'Failed to redeploy service:'
            >&2 echo "${response}" | jq '.errors'
            exit 1
          fi

          echo "${response}" | jq '.'
